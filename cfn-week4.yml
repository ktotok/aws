
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'shaman-keypair'

Resources: 
  
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
            -
              Key: "Name"
              Value: "kto-vpc"

  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-2b'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'public subnet'      

  SubnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-2a'
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'private subnet'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: 'kto-gw'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  RouteTablePublic: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public RouteTable'
         
  RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic
     
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "VPCGatewayAttachment"
    Properties:
      RouteTableId:
        Ref: "RouteTablePublic"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
    
  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'

  SecurityGroupAllowPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Allow ICMP/SSH/HTTP access for 10.0.1.0/24
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '10.0.1.0/24'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '10.0.1.0/24'
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: '10.0.1.0/24'
    

  ElasticIPForNAT:
    Type: "AWS::EC2::EIP"
    DependsOn: ["VPCGatewayAttachment"]
    Properties:
      Domain: "vpc"
  
  NAT: 
    Type : "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt ["ElasticIPForNAT", "AllocationId"]
      SubnetId: !Ref SubnetPublic
      Tags:
            -
              Key: "Name"
              Value: "NAT"

  NATRouteTable: 
    Type : "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  NATRoute: 
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref NATRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT
  
  RouteTableAssociationPrivateToNAT:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate
      RouteTableId: !Ref NATRouteTable
  
  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties: 
      Subnets: 
      - !Ref "SubnetPrivate"
      - !Ref "SubnetPublic"
      Listeners: 
      - InstancePort: "80"
        InstanceProtocol: "HTTP"
        LoadBalancerPort: "80"
        Protocol: "HTTP"
      HealthCheck: 
        HealthyThreshold: 2
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
        Target: "HTTP:80/index.html"
      CrossZone: true
      Instances: 
      - !Ref "EC2InstancePublic"
      - !Ref "EC2InstancePrivate"
      SecurityGroups: [ !Ref "SecurityGroupPublic"]
    
  EC2InstancePublic:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-00c03f7f7f2ec15c3'
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref 'SubnetPublic'
      SecurityGroupIds: [!Ref 'SecurityGroupPublic']
      UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                sudo su -
                yum update -y
                yum install -y httpd
                service httpd start
                chkconfig httpd on
                "echo "<html><h1>This is WebServer from PUBLIC subnet</h1></html>" > /var/www/html/index.html"
      Tags:
            -
              Key: "Name"
              Value: "Public" 

  EC2InstancePrivate:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-00c03f7f7f2ec15c3'
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref 'SubnetPrivate'
      SecurityGroupIds: [!Ref "SecurityGroupAllowPrivate"]
      UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                sudo su -
                yum update -y
                yum install -y httpd
                service httpd start
                chkconfig httpd on
                echo "<html><h1>This is WebServer from PRIVATE subnet</h1></html>" > /var/www/html/index.html
      Tags:
            -
              Key: "Name"
              Value: "Private"
Outputs:
  EC2InstancePublicPublicIp:
    Description: Public IP EC2InstancePublic
    Value: !GetAtt [EC2InstancePublic, PublicIp]
  
  EC2InstancePrivatePrivateIp:
    Description: Public IP EC2InstancePublic
    Value: !GetAtt [EC2InstancePrivate, PrivateIp]

  ELBDNS:
    Description: Public IP EC2InstancePublic
    Value: !GetAtt [ELB, DNSName]
