
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'shaman-keypair'

Resources: 
  
  # --------------------
  #   VPC, SubNets
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
            -
              Key: "Name"
              Value: "kto-vpc"

  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-2b'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'public subnet'      

  SubnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-2a'
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'private subnet'


  # --------------------
  #     InternetGateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: 'kto-gw'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  

  # --------------------
  #     RouteTable
  RouteTablePublic: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public RouteTable'
         
  RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic
     
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "VPCGatewayAttachment"
    Properties:
      RouteTableId:
        Ref: "RouteTablePublic"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
  
  # --------------------
  #   SecurityGroup

  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'

  SecurityGroupAllowPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Allow ICMP/SSH/HTTP access for 10.0.1.0/24
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '10.0.1.0/24'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '10.0.1.0/24'
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: '10.0.1.0/24'
    
  PostgresSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription : "Enable 5432 port"
      GroupName : "PosgresDB access"
      SecurityGroupIngress: 
      - 
        CidrIp: "0.0.0.0/0"
        FromPort: "5432"
        ToPort: "5432"
        IpProtocol: "6"

  # --------------------
  #   NAT
  ElasticIPForNAT:
    Type: "AWS::EC2::EIP"
    DependsOn: ["VPCGatewayAttachment"]
    Properties:
      Domain: "vpc"
  
  NAT: 
    Type : "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt ["ElasticIPForNAT", "AllocationId"]
      SubnetId: !Ref SubnetPublic
      Tags:
            -
              Key: "Name"
              Value: "NAT"

  NATRouteTable: 
    Type : "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  NATRoute: 
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref NATRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT
  
  RouteTableAssociationPrivateToNAT:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate
      RouteTableId: !Ref NATRouteTable
  

  # --------------------
  #     ELB
  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties: 
      Subnets: 
      - !Ref "SubnetPublic"
      Listeners: 
      - InstancePort: "80"
        InstanceProtocol: "HTTP"
        LoadBalancerPort: "80"
        Protocol: "HTTP"
      HealthCheck: 
        HealthyThreshold: 2
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
        Target: "HTTP:80/health"
      SecurityGroups: [ !Ref "SecurityGroupPublic"]
    

  # --------------------
  #   EC2 Instances
  LaunchConfigurationPublicEC2:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: 
      - 'DynamoDB'
      - 'SNSTopic'
      - 'SQSQueue'
    Properties:
      ImageId: ami-00c03f7f7f2ec15c3
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      SecurityGroups: [!Ref 'SecurityGroupPublic']
      IamInstanceProfile: !Ref ProfilePublicInstance
      
      UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                aws s3api get-object --bucket kto-bucket --key calc-0.0.1-SNAPSHOT.jar calc.jar
                sudo yum install java-1.8.0-openjdk -y
                sudo java -jar /calc.jar

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: public-sg
      VPCZoneIdentifier:
        - !Ref SubnetPublic
      LaunchConfigurationName: !Ref 'LaunchConfigurationPublicEC2'
      LoadBalancerNames: 
        - !Ref 'ELB'
      MinSize: '2'
      MaxSize: '3'
  
  EC2InstancePrivate:
    Type: AWS::EC2::Instance
    DependsOn: 
      - 'PsqlInstance'
      - 'SNSTopic'
      - 'SQSQueue'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-00c03f7f7f2ec15c3'
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref 'SubnetPrivate'
      SecurityGroupIds: [!Ref "SecurityGroupAllowPrivate"]
      IamInstanceProfile: !Ref ProfilePrivateInstance
      UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                aws s3api get-object --bucket kto-bucket --key persist3-0.0.1-SNAPSHOT.jar persist.jar
                sudo yum -y install postgresql
                sudo yum -y install java-1.8.0-openjdk
              - 'Fn::Join':
                  - ''
                  - - 'sudo RDS_HOST='
                    - !GetAtt [PsqlInstance, Endpoint.Address]
                    - ' java -jar /persist.jar'
      Tags:
            -
              Key: "Name"
              Value: "Private EC2"


  # --------------------
  #     S3Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicReadWrite
  

  # --------------------
  #     Roles
  
  RolePublic:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Path: /
  
  RolePrivate:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Path: /

  # --------------------
  #      Policies
  PolicyGetS3Object:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetS3ObjectPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: "*"
      Roles:
      - Ref: RolePublic
      - Ref: RolePrivate

  PolicySQSSNS:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CommonPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - sqs:*
          - sns:*
          Resource: "*"
      Roles:
      - Ref: RolePublic
      - Ref: RolePrivate

  DynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: dynamo-access-policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - dynamodb:List*
            - dynamodb:DescribeTable
            - dynamodb:Get*
            - dynamodb:Put*
            - dynamodb:Query
          Resource: '*'
      Roles:
        - !Ref RolePublic

  PsqlPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: rds-access-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - rds:*
            Resource: '*'
      Roles:
        - !Ref RolePrivate

  # -----------
  #     Profiles  
  ProfilePublicInstance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RolePublic
  
  ProfilePrivateInstance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RolePrivate

  # --------------------
  # SNS & SQS
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: "edu-lohika-training-aws-sqs-queue"

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "ktotok@lohika.com"
          Protocol: "email"
      TopicName: "edu-lohika-training-aws-sns-topic"
  
  # -------------------
  #     Dynamo
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: UserName
        AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: edu-lohika-training-aws-dynamodb
      KeySchema:
      - AttributeName: UserName
        KeyType: HASH
  

  # ----------
  #     Postgres
  PsqlInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: 'db.t3.micro'
      DBName: 'EduLohikaTrainingAwsRds'
      AllocatedStorage: 6
      Engine: 'postgres'
      EngineVersion: '11.4'
      MasterUsername: 'rootuser'
      MasterUserPassword: 'rootuser'
      PubliclyAccessible: True
      Port: 5432
      VPCSecurityGroups: 
        - 
          !GetAtt [ "PostgresSecurityGroup", "GroupId" ]

    
Outputs:  
  EC2InstancePrivatePrivateIp:
    Description: Public IP EC2InstancePublic
    Value: !GetAtt [EC2InstancePrivate, PrivateIp]

  ELBDNS:
    Description: Public IP EC2InstancePublic
    Value: !GetAtt [ELB, DNSName]
  
  RDSEndpointDB:
    Description: "Endpoint of the newly created RDS"
    Value: !GetAtt PsqlInstance.Endpoint.Address

  RDSPortDB:
    Description: "Port of the newly created RDS"
    Value: !GetAtt PsqlInstance.Endpoint.Port

  SNSTopicTopicARN:
    Value: !Ref SNSTopic
    Description: Topic ARN of newly created SNS topic  

  SQSQueueURL:
    Value: !Ref SQSQueue
    Description: SQSQueue details